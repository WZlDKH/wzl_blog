(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{311:function(_,t,v){"use strict";v.r(t);var e=v(6),i=Object(e.a)({},(function(){var _=this,t=_.$createElement,v=_._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h4",{attrs:{id:"_1-git提交命令"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-git提交命令"}},[_._v("#")]),_._v(" 1.git提交命令")]),_._v(" "),v("p",[_._v("（1）将修改的文件放到暂存区："),v("code",[_._v("git add .")])]),_._v(" "),v("p",[_._v("（2）将暂存的文件放到本地仓库："),v("code",[_._v('git commit -m "提交信息"')])]),_._v(" "),v("p",[_._v("（3）将代码提交到远程仓库："),v("code",[_._v("git push origin 分支名")])]),_._v(" "),v("p",[_._v("​    注：当本地项目还没有关联到远程仓库，首先得运行"),v("code",[_._v("git remote add origin(远程仓库别名) xxxxxx(远程仓库地址)")]),_._v("，然后运行"),v("code",[_._v("git push -u origin 分支名")]),_._v("将本地仓库的代码提交到远程仓库，第二次提交直接使用"),v("code",[_._v("git push")]),_._v("即可。")]),_._v(" "),v("h4",{attrs:{id:"_2-git分支操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-git分支操作"}},[_._v("#")]),_._v(" 2.git分支操作")]),_._v(" "),v("p",[_._v("（1）创建分支："),v("code",[_._v("git branch 分支名")])]),_._v(" "),v("p",[_._v("（2）删除本地分支："),v("code",[_._v("git branch -d 分支名")])]),_._v(" "),v("p",[_._v("（3）切换分支："),v("code",[_._v("git checkout 分支名")])]),_._v(" "),v("p",[_._v("（4）查看本地分支："),v("code",[_._v("git branch")])]),_._v(" "),v("p",[_._v("（5）查看远程分支："),v("code",[_._v("git branch -a")])]),_._v(" "),v("p",[_._v("（6）查看本地分支和远程分支关联设置："),v("code",[_._v("git remote show origin")])]),_._v(" "),v("p",[_._v("（7）创建分支切换分支："),v("code",[_._v("git checkout -b 分支名")])]),_._v(" "),v("p",[_._v("（8）删除远程分支：先运行"),v("code",[_._v("git branch -r -d origin/分支名")]),_._v("，再运行"),v("code",[_._v("git push origin :分支名")])]),_._v(" "),v("p",[_._v("（9）如果远程新建了一个分支，本地没有该分支，需要同步时，运行"),v("code",[_._v("git checkout --track origin/分支名")])]),_._v(" "),v("p",[_._v("（10）如果本地新建了一个分支，远程没有该分支，需要同步时，运行"),v("code",[_._v("git push --set-upstream origin 分支名")])]),_._v(" "),v("p",[_._v("（11）拉取远程分支代码：1."),v("code",[_._v("git pull")]),_._v("拉取并合并。2."),v("code",[_._v("git fetch")]),_._v("拉取不合并，需要手动"),v("code",[_._v("git merge")]),_._v("。")]),_._v(" "),v("p",[_._v("（12）查看分支最近一次提交信息："),v("code",[_._v("git branch -v")])]),_._v(" "),v("h4",{attrs:{id:"_3-git撤销命令"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-git撤销命令"}},[_._v("#")]),_._v(" 3.git撤销命令")]),_._v(" "),v("h5",{attrs:{id:"_3-1撤销工作区的修改"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-1撤销工作区的修改"}},[_._v("#")]),_._v(" 3.1撤销工作区的修改")]),_._v(" "),v("p",[_._v("​    使用命令"),v("code",[_._v("git checkout 需要撤销的文件")]),_._v("或者"),v("code",[_._v("git checkout .")]),_._v("全部取消修改，代码会回到修改前的状态。")]),_._v(" "),v("h5",{attrs:{id:"_3-2撤销add操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-2撤销add操作"}},[_._v("#")]),_._v(" 3.2撤销add操作")]),_._v(" "),v("p",[_._v("​    使用命令"),v("code",[_._v("git restore --staged 需要撤销的文件")]),_._v("或者"),v("code",[_._v("git restore --staged .")]),_._v("，将代码从暂存区恢复到工作区。")]),_._v(" "),v("h5",{attrs:{id:"_3-3撤销commit操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-3撤销commit操作"}},[_._v("#")]),_._v(" 3.3撤销commit操作")]),_._v(" "),v("p",[_._v("​    1.未push到远程仓库：")]),_._v(" "),v("p",[_._v("​        （1）使用"),v("code",[_._v("git reset --soft HEAD^/HEAD~n/版本号")]),_._v("，将代码从commit之后恢复到add之后。")]),_._v(" "),v("p",[_._v("​        （2） 使用"),v("code",[_._v("git reset --mixed HEAD^/HEAD~n/版本号")]),_._v("，默认省略--mixed，将代码从commit恢复到add之前。")]),_._v(" "),v("p",[_._v("​        （3）使用"),v("code",[_._v("git reset --hard HEAD^/HEAD~n/版本号")]),_._v("（注意：此命令会撤销对代码的修改，返回到原始状态，慎用），将 代码从commit之后恢复到到未修改的状态。")]),_._v(" "),v("p",[_._v("​          其中，HEAD^表示上一个版本，n表示进行了n次提交且是没有push到远程仓库的提交次数，版本号是指"),v("code",[_._v("git log")]),_._v("显示后每次提交对应的版本。")]),_._v(" "),v("p",[_._v("​    2.已经push到远程仓库了：首先执行1中对应的命令，然后"),v("code",[_._v("git push --force")]),_._v("推送到远程仓库。")]),_._v(" "),v("p",[_._v("注：如果想要切回该版本之后的版本，需要运行"),v("code",[_._v("git reflog")]),_._v("命令，找到对应的版本号，执行（2）中操作即可。")]),_._v(" "),v("h4",{attrs:{id:"_4-git暂存操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-git暂存操作"}},[_._v("#")]),_._v(" 4.git暂存操作")]),_._v(" "),v("p",[_._v("（1）添加改动到stash："),v("code",[_._v('git stash save -a "暂存信息"')]),_._v("，可以简写成"),v("code",[_._v("git stash")])]),_._v(" "),v("p",[_._v("（2）删除暂存："),v("code",[_._v("git stash drop stash的索引")])]),_._v(" "),v("p",[_._v("（3）查看stash列表："),v("code",[_._v("git stash list")])]),_._v(" "),v("p",[_._v("（4）删除全部的stash："),v("code",[_._v("git stash clear")])]),_._v(" "),v("p",[_._v("（5）提取暂存的代码："),v("code",[_._v("git stash pop stash的索引")]),_._v("，也可以使用"),v("code",[_._v("git stash pop")]),_._v("提取最近一次的暂存")]),_._v(" "),v("h4",{attrs:{id:"_5-git差异比较"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-git差异比较"}},[_._v("#")]),_._v(" 5.git差异比较")]),_._v(" "),v("p",[_._v("（1）比较工作区和暂存区："),v("code",[_._v("git diff")])]),_._v(" "),v("p",[_._v("（2）比较暂存区和本地仓库最近一次提交："),v("code",[_._v("git diff --cached")])]),_._v(" "),v("p",[_._v("（3）比较工作区和本地仓库最近一次提交："),v("code",[_._v("git diff HEAD")])]),_._v(" "),v("p",[_._v("（4）比较两个commit之间差异："),v("code",[_._v("git diff commitId commitId")])])])}),[],!1,null,null,null);t.default=i.exports}}]);